syntax = "proto3";
package wordsearcher;


// An Alphagram encapsulates info about an alphagram, including the words,
// length, probability, combinations.
message Alphagram {
    string alphagram = 1;
    repeated Word words = 2;
    // expandedRepr is true if the length, probability, combinations are
    // included. Otherwise, this is an "unexpanded" alphagram.
    // Note that if expandedRepr is true, then the `words` field is also
    // expanded (with definition, hooks, etc).
    bool expandedRepr = 3;

    int32 length = 4;
    int32 probability = 5;
    int64 combinations = 6;
}

// A Word is more than just the string representing the word. It has other
// info like the definition, hooks, lex symbols, etc.
message Word {
    string word = 1;
    string alphagram = 2; // Note that this alphagram is not the same as Alphagram above.
    // Note: the following fields are not filled in if the alphagram's
    // `expandedRepr` is false. Protobuf fields are optional already, but
    // this lets us be explicit.
    string definition = 3;
    string front_hooks = 4;
    string back_hooks = 5;
    string lexicon_symbols = 6;
    bool inner_front_hook = 7;
    bool inner_back_hook = 8;
}

// A SearchRequest encapsulates a number of varied conditions and lets one
// search for questions.
message SearchRequest {

    repeated SearchParam searchparams = 1;
    bool expand = 2;

    enum Condition {
        LEXICON = 0;
        LENGTH = 1;
        PROBABILITY_RANGE = 2;
        PROBABILITY_LIST = 3;
        PROBABILITY_LIMIT = 4;
        NUMBER_OF_ANAGRAMS = 5;
        NUMBER_OF_VOWELS = 6;
        // TAGS won't be implemented in the server, but we still want
        // to define it here because the GUI client will use it (and
        // undergo transformation into ALPHAGRAM_LIST before it hits
        // the server)
        HAS_TAGS = 7;
        POINT_VALUE = 8;
        MATCHING_ANAGRAM = 9;
        ALPHAGRAM_LIST = 10;
        NOT_IN_LEXICON = 11;
        REGEX = 12;  // Not yet implemented.
        // A list of words.
        WORD_LIST = 13;

        // These are used for blank challenges
        SINGLE_VALUE_LENGTH = 14;
        NUM_TWO_BLANKS = 15;
        MAX_SOLUTIONS = 16;
    }

    enum NotInLexCondition {
        OTHER_ENGLISH = 0;
        PREVIOUS_VERSION = 1;
    }

    message MinMax {
        // Used for length, prob range, prob limit, num anagrams,
        // num_vowels, point value
        int32 min = 1;
        int32 max = 2;
    }

    message StringValue {
        // Used for lexicon, matching anagram, not_in_lexicon
        string value = 1;
    }

    message StringArray {
        // Used for alphagram_list
        repeated string values = 1;
    }

    message NumberArray {
        // Used for prob list
        repeated int32 values = 1;
    }

    message NumberValue {
        int32 value = 1;
    }

    message SearchParam {
        Condition condition = 1;
        oneof conditionparam {
            MinMax minmax = 2;
            StringValue stringvalue = 3;
            StringArray stringarray = 4;
            NumberArray numberarray = 5;
            NumberValue numbervalue = 6;
        };
    }
}

message SearchResponse {
    repeated Alphagram alphagrams = 1;
    string lexicon = 2;
}

// QuestionSearcher service searches for questions (duh!)
service QuestionSearcher {
    // Search takes in a search request and returns a search response.
    // This response can be expanded or not, depending on the `expand` field
    // in SearchRequest.
    rpc Search (SearchRequest) returns (SearchResponse);
    // Expand takes in an unexpanded search response and returns a
    // search response (fully expanded). See expandedRepr above in
    // the Alphagram field.
    rpc Expand (SearchResponse) returns (SearchResponse);
}